name: NEURON CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Markdown Lint
        uses: DavidAnson/markdownlint-cli2-action@v9
        with:
          globs: "**/*.md"
          config: .markdownlint.json

  check-spelling:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check Spelling
        uses: crate-ci/typos@v1.13.10
        with:
          config: ./.github/typos.toml

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

  dependabot-auto-merge:
    runs-on: ubuntu-latest
    needs: [validate-docs, check-spelling, security-scan]
    if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' }}
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: fastify/github-action-merge-dependabot@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  welcome-new-contributors:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' && github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNo = context.payload.pull_request.number;
            const actor = context.payload.pull_request.user.login;
            
            // Check if this is the user's first contribution
            const query = `query($owner:String!, $repo:String!, $actor:String!) {
              repository(owner:$owner, name:$repo) {
                pullRequests(first: 2, states: [OPEN, CLOSED, MERGED], author: $actor) {
                  totalCount
                }
              }
            }`;
            
            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              actor: actor
            };
            
            const result = await github.graphql(query, variables);
            
            if (result.repository.pullRequests.totalCount === 1) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNo,
                body: `Bienvenue @${actor} ! ðŸŽ‰ \n\nMerci pour votre premiÃ¨re contribution au projet NEURON ! Nous apprÃ©cions votre participation et sommes impatients de collaborer avec vous. N'hÃ©sitez pas Ã  poser des questions si vous en avez besoin.`
              });
            }
